{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Desktop\\\\Oriole\\\\frontend\\\\src\\\\components\\\\PlayerControls.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/PlayerControls.js\nimport React, { useState, useEffect, useRef } from 'react';\n\n// Estimate word duration based on word length and speaking rate\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst estimateWordDuration = (word, speakingRate = 1) => {\n  // Base duration per character (in ms)\n  const baseCharDuration = 100;\n  // Additional time for word boundaries\n  const wordBoundaryDuration = 150;\n  return (word.length * baseCharDuration + wordBoundaryDuration) / speakingRate;\n};\nconst PlayerControls = ({\n  words,\n  onHighlight\n}) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [speakingRate, setSpeakingRate] = useState(1);\n  const animationRef = useRef(null);\n  const startTimeRef = useRef(null);\n  const synthRef = useRef(null);\n  const utteranceRef = useRef(null);\n  const currentWordStartRef = useRef(0);\n  const wordDurationsRef = useRef([]);\n\n  // Calculate word durations once when words change\n  useEffect(() => {\n    wordDurationsRef.current = words.map(word => estimateWordDuration(word.text, speakingRate));\n  }, [words, speakingRate]);\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      stopSpeech();\n    };\n  }, []);\n  const stopSpeech = () => {\n    if (synthRef.current && synthRef.current.speaking) {\n      synthRef.current.cancel();\n    }\n    setIsPlaying(false);\n  };\n  const updateHighlight = timestamp => {\n    if (!startTimeRef.current) {\n      startTimeRef.current = timestamp;\n      currentWordStartRef.current = timestamp;\n    }\n    const elapsed = timestamp - currentWordStartRef.current;\n    const currentDuration = wordDurationsRef.current[currentIndex] || 0;\n\n    // Update progress bar for current word\n    setProgress(Math.min(100, elapsed / currentDuration * 100));\n\n    // Check if we should move to next word\n    if (elapsed >= currentDuration) {\n      if (currentIndex < words.length - 1) {\n        // Move to next word\n        const nextIndex = currentIndex + 1;\n        setCurrentIndex(nextIndex);\n        onHighlight(words[nextIndex], nextIndex);\n        currentWordStartRef.current = timestamp;\n        setProgress(0);\n      } else {\n        // Reached end of text\n        stopSpeech();\n        return;\n      }\n    }\n\n    // Continue animation\n    animationRef.current = requestAnimationFrame(updateHighlight);\n  };\n  const startPlayback = () => {\n    if (!window.speechSynthesis) {\n      console.warn(\"Web Speech API not supported\");\n      return;\n    }\n    stopSpeech();\n\n    // Create new utterance\n    const textToSpeak = words.map(w => w.text).join(' ');\n    const utterance = new SpeechSynthesisUtterance(textToSpeak);\n    utterance.rate = speakingRate;\n    utterance.lang = 'en-US';\n\n    // Setup speech events\n    utterance.onstart = () => {\n      synthRef.current = window.speechSynthesis;\n      utteranceRef.current = utterance;\n      setIsPlaying(true);\n      startTimeRef.current = null;\n      animationRef.current = requestAnimationFrame(updateHighlight);\n    };\n    utterance.onend = () => {\n      setIsPlaying(false);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n    utterance.onerror = event => {\n      console.error(\"Speech error:\", event);\n      setIsPlaying(false);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n\n    // Start speech\n    window.speechSynthesis.speak(utterance);\n  };\n  const togglePlayback = () => {\n    if (isPlaying) {\n      stopSpeech();\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    } else {\n      startPlayback();\n    }\n  };\n  const handleWordClick = (word, index) => {\n    setCurrentIndex(index);\n    onHighlight(word, index);\n    setProgress(0);\n    if (isPlaying) {\n      // If currently playing, restart from this word\n      startPlayback();\n    }\n  };\n  const handleRateChange = newRate => {\n    setSpeakingRate(newRate);\n\n    // If currently playing, restart with new rate\n    if (isPlaying) {\n      startPlayback();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playback-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `play-btn ${isPlaying ? 'playing' : ''}`,\n        onClick: togglePlayback,\n        disabled: words.length === 0,\n        children: isPlaying ? '⏸ Pause' : '▶ Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rate-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Speed:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: speakingRate,\n          onChange: e => handleRateChange(parseFloat(e.target.value)),\n          disabled: isPlaying,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: 0.8,\n            children: \"0.8x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 1,\n            children: \"1x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 1.2,\n            children: \"1.2x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 1.5,\n            children: \"1.5x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), words.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        children: words.map((word, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `word-container ${index === currentIndex ? 'active' : ''}`,\n          onClick: () => handleWordClick(word, index),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"word\",\n            children: word.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 17\n          }, this), index === currentIndex && isPlaying && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-progress\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              style: {\n                width: `${progress}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerControls, \"5ahuZhR/YjcUzyMi2Xv1UCn5Y94=\");\n_c = PlayerControls;\nexport default PlayerControls;\nvar _c;\n$RefreshReg$(_c, \"PlayerControls\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","estimateWordDuration","word","speakingRate","baseCharDuration","wordBoundaryDuration","length","PlayerControls","words","onHighlight","_s","isPlaying","setIsPlaying","currentIndex","setCurrentIndex","progress","setProgress","setSpeakingRate","animationRef","startTimeRef","synthRef","utteranceRef","currentWordStartRef","wordDurationsRef","current","map","text","cancelAnimationFrame","stopSpeech","speaking","cancel","updateHighlight","timestamp","elapsed","currentDuration","Math","min","nextIndex","requestAnimationFrame","startPlayback","window","speechSynthesis","console","warn","textToSpeak","w","join","utterance","SpeechSynthesisUtterance","rate","lang","onstart","onend","onerror","event","error","speak","togglePlayback","handleWordClick","index","handleRateChange","newRate","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","parseFloat","target","style","width","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/OneDrive/Desktop/Oriole/frontend/src/components/PlayerControls.js"],"sourcesContent":["// frontend/src/components/PlayerControls.js\r\nimport React, { useState, useEffect, useRef } from 'react';\r\n\r\n// Estimate word duration based on word length and speaking rate\r\nconst estimateWordDuration = (word, speakingRate = 1) => {\r\n  // Base duration per character (in ms)\r\n  const baseCharDuration = 100; \r\n  // Additional time for word boundaries\r\n  const wordBoundaryDuration = 150; \r\n  \r\n  return (word.length * baseCharDuration + wordBoundaryDuration) / speakingRate;\r\n};\r\n\r\nconst PlayerControls = ({ words, onHighlight }) => {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [progress, setProgress] = useState(0);\r\n  const [speakingRate, setSpeakingRate] = useState(1);\r\n  const animationRef = useRef(null);\r\n  const startTimeRef = useRef(null);\r\n  const synthRef = useRef(null);\r\n  const utteranceRef = useRef(null);\r\n  const currentWordStartRef = useRef(0);\r\n  const wordDurationsRef = useRef([]);\r\n\r\n  // Calculate word durations once when words change\r\n  useEffect(() => {\r\n    wordDurationsRef.current = words.map(word => \r\n      estimateWordDuration(word.text, speakingRate)\r\n    );\r\n  }, [words, speakingRate]);\r\n\r\n  // Clean up on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current);\r\n      }\r\n      stopSpeech();\r\n    };\r\n  }, []);\r\n\r\n  const stopSpeech = () => {\r\n    if (synthRef.current && synthRef.current.speaking) {\r\n      synthRef.current.cancel();\r\n    }\r\n    setIsPlaying(false);\r\n  };\r\n\r\n  const updateHighlight = (timestamp) => {\r\n    if (!startTimeRef.current) {\r\n      startTimeRef.current = timestamp;\r\n      currentWordStartRef.current = timestamp;\r\n    }\r\n    \r\n    const elapsed = timestamp - currentWordStartRef.current;\r\n    const currentDuration = wordDurationsRef.current[currentIndex] || 0;\r\n    \r\n    // Update progress bar for current word\r\n    setProgress(Math.min(100, (elapsed / currentDuration) * 100));\r\n    \r\n    // Check if we should move to next word\r\n    if (elapsed >= currentDuration) {\r\n      if (currentIndex < words.length - 1) {\r\n        // Move to next word\r\n        const nextIndex = currentIndex + 1;\r\n        setCurrentIndex(nextIndex);\r\n        onHighlight(words[nextIndex], nextIndex);\r\n        currentWordStartRef.current = timestamp;\r\n        setProgress(0);\r\n      } else {\r\n        // Reached end of text\r\n        stopSpeech();\r\n        return;\r\n      }\r\n    }\r\n    \r\n    // Continue animation\r\n    animationRef.current = requestAnimationFrame(updateHighlight);\r\n  };\r\n\r\n  const startPlayback = () => {\r\n    if (!window.speechSynthesis) {\r\n      console.warn(\"Web Speech API not supported\");\r\n      return;\r\n    }\r\n    \r\n    stopSpeech();\r\n    \r\n    // Create new utterance\r\n    const textToSpeak = words.map(w => w.text).join(' ');\r\n    const utterance = new SpeechSynthesisUtterance(textToSpeak);\r\n    utterance.rate = speakingRate;\r\n    utterance.lang = 'en-US';\r\n    \r\n    // Setup speech events\r\n    utterance.onstart = () => {\r\n      synthRef.current = window.speechSynthesis;\r\n      utteranceRef.current = utterance;\r\n      setIsPlaying(true);\r\n      startTimeRef.current = null;\r\n      animationRef.current = requestAnimationFrame(updateHighlight);\r\n    };\r\n    \r\n    utterance.onend = () => {\r\n      setIsPlaying(false);\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current);\r\n      }\r\n    };\r\n    \r\n    utterance.onerror = (event) => {\r\n      console.error(\"Speech error:\", event);\r\n      setIsPlaying(false);\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current);\r\n      }\r\n    };\r\n    \r\n    // Start speech\r\n    window.speechSynthesis.speak(utterance);\r\n  };\r\n\r\n  const togglePlayback = () => {\r\n    if (isPlaying) {\r\n      stopSpeech();\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current);\r\n      }\r\n    } else {\r\n      startPlayback();\r\n    }\r\n  };\r\n\r\n  const handleWordClick = (word, index) => {\r\n    setCurrentIndex(index);\r\n    onHighlight(word, index);\r\n    setProgress(0);\r\n    \r\n    if (isPlaying) {\r\n      // If currently playing, restart from this word\r\n      startPlayback();\r\n    }\r\n  };\r\n\r\n  const handleRateChange = (newRate) => {\r\n    setSpeakingRate(newRate);\r\n    \r\n    // If currently playing, restart with new rate\r\n    if (isPlaying) {\r\n      startPlayback();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"player-controls\">\r\n      <div className=\"playback-controls\">\r\n        <button \r\n          className={`play-btn ${isPlaying ? 'playing' : ''}`}\r\n          onClick={togglePlayback}\r\n          disabled={words.length === 0}\r\n        >\r\n          {isPlaying ? '⏸ Pause' : '▶ Play'}\r\n        </button>\r\n        \r\n        <div className=\"rate-control\">\r\n          <label>Speed:</label>\r\n          <select \r\n            value={speakingRate} \r\n            onChange={(e) => handleRateChange(parseFloat(e.target.value))}\r\n            disabled={isPlaying}\r\n          >\r\n            <option value={0.8}>0.8x</option>\r\n            <option value={1}>1x</option>\r\n            <option value={1.2}>1.2x</option>\r\n            <option value={1.5}>1.5x</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {words.length > 0 && (\r\n        <div className=\"progress-container\">\r\n          <div className=\"progress\">\r\n            {words.map((word, index) => (\r\n              <div \r\n                key={index}\r\n                className={`word-container ${index === currentIndex ? 'active' : ''}`}\r\n                onClick={() => handleWordClick(word, index)}\r\n              >\r\n                <span className=\"word\">\r\n                  {word.text}\r\n                </span>\r\n                {index === currentIndex && isPlaying && (\r\n                  <div className=\"word-progress\">\r\n                    <div \r\n                      className=\"progress-bar\" \r\n                      style={{ width: `${progress}%` }}\r\n                    ></div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayerControls;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;;AAE1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,oBAAoB,GAAGA,CAACC,IAAI,EAAEC,YAAY,GAAG,CAAC,KAAK;EACvD;EACA,MAAMC,gBAAgB,GAAG,GAAG;EAC5B;EACA,MAAMC,oBAAoB,GAAG,GAAG;EAEhC,OAAO,CAACH,IAAI,CAACI,MAAM,GAAGF,gBAAgB,GAAGC,oBAAoB,IAAIF,YAAY;AAC/E,CAAC;AAED,MAAMI,cAAc,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACO,YAAY,EAAEc,eAAe,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAMsB,YAAY,GAAGpB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMqB,YAAY,GAAGrB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMsB,QAAQ,GAAGtB,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMuB,YAAY,GAAGvB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMwB,mBAAmB,GAAGxB,MAAM,CAAC,CAAC,CAAC;EACrC,MAAMyB,gBAAgB,GAAGzB,MAAM,CAAC,EAAE,CAAC;;EAEnC;EACAD,SAAS,CAAC,MAAM;IACd0B,gBAAgB,CAACC,OAAO,GAAGhB,KAAK,CAACiB,GAAG,CAACvB,IAAI,IACvCD,oBAAoB,CAACC,IAAI,CAACwB,IAAI,EAAEvB,YAAY,CAC9C,CAAC;EACH,CAAC,EAAE,CAACK,KAAK,EAAEL,YAAY,CAAC,CAAC;;EAEzB;EACAN,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIqB,YAAY,CAACM,OAAO,EAAE;QACxBG,oBAAoB,CAACT,YAAY,CAACM,OAAO,CAAC;MAC5C;MACAI,UAAU,CAAC,CAAC;IACd,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIR,QAAQ,CAACI,OAAO,IAAIJ,QAAQ,CAACI,OAAO,CAACK,QAAQ,EAAE;MACjDT,QAAQ,CAACI,OAAO,CAACM,MAAM,CAAC,CAAC;IAC3B;IACAlB,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,MAAMmB,eAAe,GAAIC,SAAS,IAAK;IACrC,IAAI,CAACb,YAAY,CAACK,OAAO,EAAE;MACzBL,YAAY,CAACK,OAAO,GAAGQ,SAAS;MAChCV,mBAAmB,CAACE,OAAO,GAAGQ,SAAS;IACzC;IAEA,MAAMC,OAAO,GAAGD,SAAS,GAAGV,mBAAmB,CAACE,OAAO;IACvD,MAAMU,eAAe,GAAGX,gBAAgB,CAACC,OAAO,CAACX,YAAY,CAAC,IAAI,CAAC;;IAEnE;IACAG,WAAW,CAACmB,IAAI,CAACC,GAAG,CAAC,GAAG,EAAGH,OAAO,GAAGC,eAAe,GAAI,GAAG,CAAC,CAAC;;IAE7D;IACA,IAAID,OAAO,IAAIC,eAAe,EAAE;MAC9B,IAAIrB,YAAY,GAAGL,KAAK,CAACF,MAAM,GAAG,CAAC,EAAE;QACnC;QACA,MAAM+B,SAAS,GAAGxB,YAAY,GAAG,CAAC;QAClCC,eAAe,CAACuB,SAAS,CAAC;QAC1B5B,WAAW,CAACD,KAAK,CAAC6B,SAAS,CAAC,EAAEA,SAAS,CAAC;QACxCf,mBAAmB,CAACE,OAAO,GAAGQ,SAAS;QACvChB,WAAW,CAAC,CAAC,CAAC;MAChB,CAAC,MAAM;QACL;QACAY,UAAU,CAAC,CAAC;QACZ;MACF;IACF;;IAEA;IACAV,YAAY,CAACM,OAAO,GAAGc,qBAAqB,CAACP,eAAe,CAAC;EAC/D,CAAC;EAED,MAAMQ,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI,CAACC,MAAM,CAACC,eAAe,EAAE;MAC3BC,OAAO,CAACC,IAAI,CAAC,8BAA8B,CAAC;MAC5C;IACF;IAEAf,UAAU,CAAC,CAAC;;IAEZ;IACA,MAAMgB,WAAW,GAAGpC,KAAK,CAACiB,GAAG,CAACoB,CAAC,IAAIA,CAAC,CAACnB,IAAI,CAAC,CAACoB,IAAI,CAAC,GAAG,CAAC;IACpD,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACJ,WAAW,CAAC;IAC3DG,SAAS,CAACE,IAAI,GAAG9C,YAAY;IAC7B4C,SAAS,CAACG,IAAI,GAAG,OAAO;;IAExB;IACAH,SAAS,CAACI,OAAO,GAAG,MAAM;MACxB/B,QAAQ,CAACI,OAAO,GAAGgB,MAAM,CAACC,eAAe;MACzCpB,YAAY,CAACG,OAAO,GAAGuB,SAAS;MAChCnC,YAAY,CAAC,IAAI,CAAC;MAClBO,YAAY,CAACK,OAAO,GAAG,IAAI;MAC3BN,YAAY,CAACM,OAAO,GAAGc,qBAAqB,CAACP,eAAe,CAAC;IAC/D,CAAC;IAEDgB,SAAS,CAACK,KAAK,GAAG,MAAM;MACtBxC,YAAY,CAAC,KAAK,CAAC;MACnB,IAAIM,YAAY,CAACM,OAAO,EAAE;QACxBG,oBAAoB,CAACT,YAAY,CAACM,OAAO,CAAC;MAC5C;IACF,CAAC;IAEDuB,SAAS,CAACM,OAAO,GAAIC,KAAK,IAAK;MAC7BZ,OAAO,CAACa,KAAK,CAAC,eAAe,EAAED,KAAK,CAAC;MACrC1C,YAAY,CAAC,KAAK,CAAC;MACnB,IAAIM,YAAY,CAACM,OAAO,EAAE;QACxBG,oBAAoB,CAACT,YAAY,CAACM,OAAO,CAAC;MAC5C;IACF,CAAC;;IAED;IACAgB,MAAM,CAACC,eAAe,CAACe,KAAK,CAACT,SAAS,CAAC;EACzC,CAAC;EAED,MAAMU,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI9C,SAAS,EAAE;MACbiB,UAAU,CAAC,CAAC;MACZ,IAAIV,YAAY,CAACM,OAAO,EAAE;QACxBG,oBAAoB,CAACT,YAAY,CAACM,OAAO,CAAC;MAC5C;IACF,CAAC,MAAM;MACLe,aAAa,CAAC,CAAC;IACjB;EACF,CAAC;EAED,MAAMmB,eAAe,GAAGA,CAACxD,IAAI,EAAEyD,KAAK,KAAK;IACvC7C,eAAe,CAAC6C,KAAK,CAAC;IACtBlD,WAAW,CAACP,IAAI,EAAEyD,KAAK,CAAC;IACxB3C,WAAW,CAAC,CAAC,CAAC;IAEd,IAAIL,SAAS,EAAE;MACb;MACA4B,aAAa,CAAC,CAAC;IACjB;EACF,CAAC;EAED,MAAMqB,gBAAgB,GAAIC,OAAO,IAAK;IACpC5C,eAAe,CAAC4C,OAAO,CAAC;;IAExB;IACA,IAAIlD,SAAS,EAAE;MACb4B,aAAa,CAAC,CAAC;IACjB;EACF,CAAC;EAED,oBACEvC,OAAA;IAAK8D,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9B/D,OAAA;MAAK8D,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChC/D,OAAA;QACE8D,SAAS,EAAE,YAAYnD,SAAS,GAAG,SAAS,GAAG,EAAE,EAAG;QACpDqD,OAAO,EAAEP,cAAe;QACxBQ,QAAQ,EAAEzD,KAAK,CAACF,MAAM,KAAK,CAAE;QAAAyD,QAAA,EAE5BpD,SAAS,GAAG,SAAS,GAAG;MAAQ;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B,CAAC,eAETrE,OAAA;QAAK8D,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3B/D,OAAA;UAAA+D,QAAA,EAAO;QAAM;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACrBrE,OAAA;UACEsE,KAAK,EAAEnE,YAAa;UACpBoE,QAAQ,EAAGC,CAAC,IAAKZ,gBAAgB,CAACa,UAAU,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC,CAAE;UAC9DL,QAAQ,EAAEtD,SAAU;UAAAoD,QAAA,gBAEpB/D,OAAA;YAAQsE,KAAK,EAAE,GAAI;YAAAP,QAAA,EAAC;UAAI;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACjCrE,OAAA;YAAQsE,KAAK,EAAE,CAAE;YAAAP,QAAA,EAAC;UAAE;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC7BrE,OAAA;YAAQsE,KAAK,EAAE,GAAI;YAAAP,QAAA,EAAC;UAAI;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACjCrE,OAAA;YAAQsE,KAAK,EAAE,GAAI;YAAAP,QAAA,EAAC;UAAI;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAEL7D,KAAK,CAACF,MAAM,GAAG,CAAC,iBACfN,OAAA;MAAK8D,SAAS,EAAC,oBAAoB;MAAAC,QAAA,eACjC/D,OAAA;QAAK8D,SAAS,EAAC,UAAU;QAAAC,QAAA,EACtBvD,KAAK,CAACiB,GAAG,CAAC,CAACvB,IAAI,EAAEyD,KAAK,kBACrB3D,OAAA;UAEE8D,SAAS,EAAE,kBAAkBH,KAAK,KAAK9C,YAAY,GAAG,QAAQ,GAAG,EAAE,EAAG;UACtEmD,OAAO,EAAEA,CAAA,KAAMN,eAAe,CAACxD,IAAI,EAAEyD,KAAK,CAAE;UAAAI,QAAA,gBAE5C/D,OAAA;YAAM8D,SAAS,EAAC,MAAM;YAAAC,QAAA,EACnB7D,IAAI,CAACwB;UAAI;YAAAwC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,EACNV,KAAK,KAAK9C,YAAY,IAAIF,SAAS,iBAClCX,OAAA;YAAK8D,SAAS,EAAC,eAAe;YAAAC,QAAA,eAC5B/D,OAAA;cACE8D,SAAS,EAAC,cAAc;cACxBa,KAAK,EAAE;gBAAEC,KAAK,EAAE,GAAG7D,QAAQ;cAAI;YAAE;cAAAmD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7B;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CACN;QAAA,GAdIV,KAAK;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAeP,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC3D,EAAA,CAlMIH,cAAc;AAAAsE,EAAA,GAAdtE,cAAc;AAoMpB,eAAeA,cAAc;AAAC,IAAAsE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}