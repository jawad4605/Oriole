{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Desktop\\\\Oriole\\\\frontend\\\\src\\\\components\\\\PlayerControls.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerControls = ({\n  words,\n  onHighlight,\n  highlightedIndex\n}) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [speakingRate, setSpeakingRate] = useState(1);\n  const animationRef = useRef(null);\n  const startTimeRef = useRef(null);\n  const synthRef = useRef(window.speechSynthesis);\n  const utteranceRef = useRef(null);\n  const wordDurationsRef = useRef([]);\n  const lastIndexRef = useRef(-1);\n\n  // Calculate word durations based on length and speaking rate\n  const calculateWordDurations = () => {\n    return words.map(word => {\n      // Base duration per character (in ms)\n      const baseCharDuration = 120;\n      // Additional time for word boundaries\n      const wordBoundaryDuration = 200;\n      return Math.max(300,\n      // Minimum duration for any word\n      (word.text.length * baseCharDuration + wordBoundaryDuration) / speakingRate);\n    });\n  };\n\n  // Initialize or update when words/speakingRate changes\n  useEffect(() => {\n    wordDurationsRef.current = calculateWordDurations();\n  }, [words, speakingRate]);\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      stopSpeech();\n    };\n  }, []);\n\n  // Reset state when words change (e.g., when page changes)\n  useEffect(() => {\n    setCurrentIndex(0);\n    setProgress(0);\n    stopSpeech();\n  }, [words]);\n  const stopSpeech = () => {\n    if (synthRef.current && synthRef.current.speaking) {\n      synthRef.current.cancel();\n    }\n    setIsPlaying(false);\n    setProgress(0);\n  };\n  const updateHighlight = timestamp => {\n    if (!startTimeRef.current) {\n      startTimeRef.current = timestamp;\n    }\n    const elapsed = timestamp - startTimeRef.current;\n    let cumulativeTime = 0;\n    let currentWordIndex = 0;\n    let wordProgress = 0;\n\n    // Find the current word based on cumulative time\n    for (let i = 0; i < words.length; i++) {\n      const wordDuration = wordDurationsRef.current[i];\n      if (elapsed < cumulativeTime + wordDuration) {\n        currentWordIndex = i;\n        wordProgress = (elapsed - cumulativeTime) / wordDuration;\n        break;\n      }\n      cumulativeTime += wordDuration;\n\n      // If we're at the last word and elapsed is beyond it\n      if (i === words.length - 1) {\n        currentWordIndex = i;\n        wordProgress = 1;\n      }\n    }\n\n    // Update state if word changed\n    if (currentWordIndex !== lastIndexRef.current) {\n      setCurrentIndex(currentWordIndex);\n      onHighlight(words[currentWordIndex], currentWordIndex);\n      lastIndexRef.current = currentWordIndex;\n    }\n\n    // Update progress (0-100)\n    setProgress(Math.min(100, wordProgress * 100));\n\n    // Continue animation if we're still within the speech\n    if (currentWordIndex < words.length - 1 || wordProgress < 1) {\n      animationRef.current = requestAnimationFrame(updateHighlight);\n    } else {\n      // Reached end of speech\n      stopSpeech();\n    }\n  };\n  const startPlayback = () => {\n    if (!synthRef.current) {\n      console.warn(\"Web Speech API not supported\");\n      return;\n    }\n    stopSpeech();\n\n    // Create new utterance\n    const textToSpeak = words.map(w => w.text).join(' ');\n    const utterance = new SpeechSynthesisUtterance(textToSpeak);\n    utterance.rate = speakingRate;\n    utterance.lang = 'en-US';\n\n    // Setup speech events\n    utterance.onstart = () => {\n      utteranceRef.current = utterance;\n      setIsPlaying(true);\n      startTimeRef.current = null;\n      lastIndexRef.current = -1;\n      animationRef.current = requestAnimationFrame(updateHighlight);\n    };\n    utterance.onend = () => {\n      setIsPlaying(false);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      setProgress(100);\n    };\n    utterance.onerror = event => {\n      console.error(\"Speech error:\", event);\n      setIsPlaying(false);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      setProgress(0);\n    };\n\n    // Start speech\n    synthRef.current.speak(utterance);\n  };\n  const togglePlayback = () => {\n    if (isPlaying) {\n      stopSpeech();\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    } else {\n      startPlayback();\n    }\n  };\n  const handleWordClick = (word, index) => {\n    setCurrentIndex(index);\n    onHighlight(word, index);\n    setProgress(0);\n    if (isPlaying) {\n      // If currently playing, restart from this word\n      startPlayback();\n    }\n  };\n  const handleRateChange = newRate => {\n    setSpeakingRate(newRate);\n    wordDurationsRef.current = calculateWordDurations();\n\n    // If currently playing, restart with new rate\n    if (isPlaying) {\n      startPlayback();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playback-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `play-btn ${isPlaying ? 'playing' : ''}`,\n        onClick: togglePlayback,\n        disabled: words.length === 0,\n        children: isPlaying ? '⏸ Pause' : '▶ Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rate-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Speed:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: speakingRate,\n          onChange: e => handleRateChange(parseFloat(e.target.value)),\n          disabled: isPlaying,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: 0.7,\n            children: \"0.7x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 0.8,\n            children: \"0.8x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 0.9,\n            children: \"0.9x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 1,\n            children: \"1.0x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 1.1,\n            children: \"1.1x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 1.2,\n            children: \"1.2x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), words.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        children: words.map((word, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `word-container ${index === currentIndex ? 'active' : ''} ${index === highlightedIndex ? 'highlighted' : ''}`,\n          onClick: () => handleWordClick(word, index),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"word\",\n            children: word.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 17\n          }, this), index === currentIndex && isPlaying && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-progress\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              style: {\n                width: `${progress}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerControls, \"fsXKYqMfmmn9uWtkiLX6Lq3LOhc=\");\n_c = PlayerControls;\nexport default PlayerControls;\nvar _c;\n$RefreshReg$(_c, \"PlayerControls\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","PlayerControls","words","onHighlight","highlightedIndex","_s","isPlaying","setIsPlaying","currentIndex","setCurrentIndex","progress","setProgress","speakingRate","setSpeakingRate","animationRef","startTimeRef","synthRef","window","speechSynthesis","utteranceRef","wordDurationsRef","lastIndexRef","calculateWordDurations","map","word","baseCharDuration","wordBoundaryDuration","Math","max","text","length","current","cancelAnimationFrame","stopSpeech","speaking","cancel","updateHighlight","timestamp","elapsed","cumulativeTime","currentWordIndex","wordProgress","i","wordDuration","min","requestAnimationFrame","startPlayback","console","warn","textToSpeak","w","join","utterance","SpeechSynthesisUtterance","rate","lang","onstart","onend","onerror","event","error","speak","togglePlayback","handleWordClick","index","handleRateChange","newRate","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","parseFloat","target","style","width","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/OneDrive/Desktop/Oriole/frontend/src/components/PlayerControls.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst PlayerControls = ({ words, onHighlight, highlightedIndex }) => {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [progress, setProgress] = useState(0);\r\n  const [speakingRate, setSpeakingRate] = useState(1);\r\n  const animationRef = useRef(null);\r\n  const startTimeRef = useRef(null);\r\n  const synthRef = useRef(window.speechSynthesis);\r\n  const utteranceRef = useRef(null);\r\n  const wordDurationsRef = useRef([]);\r\n  const lastIndexRef = useRef(-1);\r\n  \r\n  // Calculate word durations based on length and speaking rate\r\n  const calculateWordDurations = () => {\r\n    return words.map(word => {\r\n      // Base duration per character (in ms)\r\n      const baseCharDuration = 120; \r\n      // Additional time for word boundaries\r\n      const wordBoundaryDuration = 200; \r\n      \r\n      return Math.max(\r\n        300, // Minimum duration for any word\r\n        (word.text.length * baseCharDuration + wordBoundaryDuration) / speakingRate\r\n      );\r\n    });\r\n  };\r\n\r\n  // Initialize or update when words/speakingRate changes\r\n  useEffect(() => {\r\n    wordDurationsRef.current = calculateWordDurations();\r\n  }, [words, speakingRate]);\r\n\r\n  // Clean up on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current);\r\n      }\r\n      stopSpeech();\r\n    };\r\n  }, []);\r\n\r\n  // Reset state when words change (e.g., when page changes)\r\n  useEffect(() => {\r\n    setCurrentIndex(0);\r\n    setProgress(0);\r\n    stopSpeech();\r\n  }, [words]);\r\n\r\n  const stopSpeech = () => {\r\n    if (synthRef.current && synthRef.current.speaking) {\r\n      synthRef.current.cancel();\r\n    }\r\n    setIsPlaying(false);\r\n    setProgress(0);\r\n  };\r\n\r\n  const updateHighlight = (timestamp) => {\r\n    if (!startTimeRef.current) {\r\n      startTimeRef.current = timestamp;\r\n    }\r\n    \r\n    const elapsed = timestamp - startTimeRef.current;\r\n    let cumulativeTime = 0;\r\n    let currentWordIndex = 0;\r\n    let wordProgress = 0;\r\n    \r\n    // Find the current word based on cumulative time\r\n    for (let i = 0; i < words.length; i++) {\r\n      const wordDuration = wordDurationsRef.current[i];\r\n      \r\n      if (elapsed < cumulativeTime + wordDuration) {\r\n        currentWordIndex = i;\r\n        wordProgress = (elapsed - cumulativeTime) / wordDuration;\r\n        break;\r\n      }\r\n      \r\n      cumulativeTime += wordDuration;\r\n      \r\n      // If we're at the last word and elapsed is beyond it\r\n      if (i === words.length - 1) {\r\n        currentWordIndex = i;\r\n        wordProgress = 1;\r\n      }\r\n    }\r\n    \r\n    // Update state if word changed\r\n    if (currentWordIndex !== lastIndexRef.current) {\r\n      setCurrentIndex(currentWordIndex);\r\n      onHighlight(words[currentWordIndex], currentWordIndex);\r\n      lastIndexRef.current = currentWordIndex;\r\n    }\r\n    \r\n    // Update progress (0-100)\r\n    setProgress(Math.min(100, wordProgress * 100));\r\n    \r\n    // Continue animation if we're still within the speech\r\n    if (currentWordIndex < words.length - 1 || wordProgress < 1) {\r\n      animationRef.current = requestAnimationFrame(updateHighlight);\r\n    } else {\r\n      // Reached end of speech\r\n      stopSpeech();\r\n    }\r\n  };\r\n\r\n  const startPlayback = () => {\r\n    if (!synthRef.current) {\r\n      console.warn(\"Web Speech API not supported\");\r\n      return;\r\n    }\r\n    \r\n    stopSpeech();\r\n    \r\n    // Create new utterance\r\n    const textToSpeak = words.map(w => w.text).join(' ');\r\n    const utterance = new SpeechSynthesisUtterance(textToSpeak);\r\n    utterance.rate = speakingRate;\r\n    utterance.lang = 'en-US';\r\n    \r\n    // Setup speech events\r\n    utterance.onstart = () => {\r\n      utteranceRef.current = utterance;\r\n      setIsPlaying(true);\r\n      startTimeRef.current = null;\r\n      lastIndexRef.current = -1;\r\n      animationRef.current = requestAnimationFrame(updateHighlight);\r\n    };\r\n    \r\n    utterance.onend = () => {\r\n      setIsPlaying(false);\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current);\r\n      }\r\n      setProgress(100);\r\n    };\r\n    \r\n    utterance.onerror = (event) => {\r\n      console.error(\"Speech error:\", event);\r\n      setIsPlaying(false);\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current);\r\n      }\r\n      setProgress(0);\r\n    };\r\n    \r\n    // Start speech\r\n    synthRef.current.speak(utterance);\r\n  };\r\n\r\n  const togglePlayback = () => {\r\n    if (isPlaying) {\r\n      stopSpeech();\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current);\r\n      }\r\n    } else {\r\n      startPlayback();\r\n    }\r\n  };\r\n\r\n  const handleWordClick = (word, index) => {\r\n    setCurrentIndex(index);\r\n    onHighlight(word, index);\r\n    setProgress(0);\r\n    \r\n    if (isPlaying) {\r\n      // If currently playing, restart from this word\r\n      startPlayback();\r\n    }\r\n  };\r\n\r\n  const handleRateChange = (newRate) => {\r\n    setSpeakingRate(newRate);\r\n    wordDurationsRef.current = calculateWordDurations();\r\n    \r\n    // If currently playing, restart with new rate\r\n    if (isPlaying) {\r\n      startPlayback();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"player-controls\">\r\n      <div className=\"playback-controls\">\r\n        <button \r\n          className={`play-btn ${isPlaying ? 'playing' : ''}`}\r\n          onClick={togglePlayback}\r\n          disabled={words.length === 0}\r\n        >\r\n          {isPlaying ? '⏸ Pause' : '▶ Play'}\r\n        </button>\r\n        \r\n        <div className=\"rate-control\">\r\n          <label>Speed:</label>\r\n          <select \r\n            value={speakingRate} \r\n            onChange={(e) => handleRateChange(parseFloat(e.target.value))}\r\n            disabled={isPlaying}\r\n          >\r\n            <option value={0.7}>0.7x</option>\r\n            <option value={0.8}>0.8x</option>\r\n            <option value={0.9}>0.9x</option>\r\n            <option value={1}>1.0x</option>\r\n            <option value={1.1}>1.1x</option>\r\n            <option value={1.2}>1.2x</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {words.length > 0 && (\r\n        <div className=\"progress-container\">\r\n          <div className=\"progress\">\r\n            {words.map((word, index) => (\r\n              <div \r\n                key={index}\r\n                className={`word-container ${index === currentIndex ? 'active' : ''} ${index === highlightedIndex ? 'highlighted' : ''}`}\r\n                onClick={() => handleWordClick(word, index)}\r\n              >\r\n                <span className=\"word\">\r\n                  {word.text}\r\n                </span>\r\n                {index === currentIndex && isPlaying && (\r\n                  <div className=\"word-progress\">\r\n                    <div \r\n                      className=\"progress-bar\" \r\n                      style={{ width: `${progress}%` }}\r\n                    ></div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayerControls;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}