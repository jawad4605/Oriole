{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Desktop\\\\Oriole\\\\frontend\\\\src\\\\components\\\\PlayerControls.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerControls = ({\n  words,\n  onHighlight,\n  highlightedIndex\n}) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [utterance, setUtterance] = useState(null);\n  const startIndicesRef = useRef([]);\n  const synthRef = useRef(null);\n\n  // Initialize speech synthesis\n  useEffect(() => {\n    if (!window.speechSynthesis) {\n      console.warn(\"Web Speech API not supported\");\n      return;\n    }\n    synthRef.current = window.speechSynthesis;\n    const u = new SpeechSynthesisUtterance();\n    u.lang = 'en-US';\n    u.rate = 1;\n    setUtterance(u);\n    return () => {\n      synthRef.current.cancel();\n    };\n  }, []);\n\n  // Update utterance text and compute start indices\n  useEffect(() => {\n    if (utterance && words.length > 0) {\n      const fullText = words.map(w => w.text).join(' ');\n      utterance.text = fullText;\n\n      // Precompute word start indices (including spaces)\n      const starts = [];\n      let current = 0;\n      for (let i = 0; i < words.length; i++) {\n        starts.push(current);\n        current += words[i].text.length + (i < words.length - 1 ? 1 : 0); // Add space after each word\n      }\n      startIndicesRef.current = starts;\n    }\n  }, [words, utterance]);\n\n  // Setup utterance boundary handler\n  useEffect(() => {\n    if (!utterance) return;\n    utterance.onboundary = event => {\n      if (event.name === 'word') {\n        const charIndex = event.charIndex;\n        const startIndices = startIndicesRef.current;\n\n        // Find current word index using precomputed start positions\n        for (let i = 0; i < startIndices.length; i++) {\n          const start = startIndices[i];\n          const end = start + words[i].text.length;\n          if (charIndex >= start && charIndex < end) {\n            setCurrentIndex(i);\n            onHighlight(words[i], i);\n            break;\n          }\n        }\n      }\n    };\n  }, [utterance, words, onHighlight]);\n  const togglePlayback = () => {\n    if (!synthRef.current) return;\n    if (isPlaying) {\n      synthRef.current.pause();\n      setIsPlaying(false);\n    } else {\n      if (synthRef.current.paused) {\n        synthRef.current.resume();\n      } else {\n        synthRef.current.cancel(); // Clear any previous utterances\n        synthRef.current.speak(utterance);\n      }\n      setIsPlaying(true);\n    }\n  };\n  const handleWordClick = (word, index) => {\n    setCurrentIndex(index);\n    onHighlight(word, index);\n    if (!synthRef.current || !utterance) return;\n    synthRef.current.cancel(); // Stop current speech\n\n    // Create new utterance from clicked word\n    const textToSpeak = words.slice(index).map(w => w.text).join(' ');\n    const u = new SpeechSynthesisUtterance(textToSpeak);\n    u.lang = 'en-US';\n    u.rate = 1;\n\n    // Precompute start indices for subset\n    const starts = [];\n    let current = 0;\n    const subset = words.slice(index);\n    for (let i = 0; i < subset.length; i++) {\n      starts.push(current);\n      current += subset[i].text.length + (i < subset.length - 1 ? 1 : 0);\n    }\n    u.onboundary = event => {\n      if (event.name === 'word') {\n        const charIndex = event.charIndex;\n        for (let i = 0; i < starts.length; i++) {\n          const start = starts[i];\n          const end = start + subset[i].text.length;\n          if (charIndex >= start && charIndex < end) {\n            const originalIndex = index + i;\n            setCurrentIndex(originalIndex);\n            onHighlight(words[originalIndex], originalIndex);\n            break;\n          }\n        }\n      }\n    };\n    synthRef.current.speak(u);\n    setIsPlaying(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playback-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"play-btn\",\n        onClick: togglePlayback,\n        disabled: words.length === 0,\n        children: isPlaying ? '⏸ Pause' : '▶ Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), words.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        children: words.map((word, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `word ${index === currentIndex ? 'active' : ''} ${index === highlightedIndex ? 'highlighted' : ''}`,\n          onClick: () => handleWordClick(word, index),\n          children: word.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerControls, \"66UT2TwKBgqXzH/rZpTY8FnHh3U=\");\n_c = PlayerControls;\nexport default PlayerControls;\nvar _c;\n$RefreshReg$(_c, \"PlayerControls\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","PlayerControls","words","onHighlight","highlightedIndex","_s","isPlaying","setIsPlaying","currentIndex","setCurrentIndex","utterance","setUtterance","startIndicesRef","synthRef","window","speechSynthesis","console","warn","current","u","SpeechSynthesisUtterance","lang","rate","cancel","length","fullText","map","w","text","join","starts","i","push","onboundary","event","name","charIndex","startIndices","start","end","togglePlayback","pause","paused","resume","speak","handleWordClick","word","index","textToSpeak","slice","subset","originalIndex","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/OneDrive/Desktop/Oriole/frontend/src/components/PlayerControls.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst PlayerControls = ({ words, onHighlight, highlightedIndex }) => {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [utterance, setUtterance] = useState(null);\r\n  const startIndicesRef = useRef([]);\r\n  const synthRef = useRef(null);\r\n\r\n  // Initialize speech synthesis\r\n  useEffect(() => {\r\n    if (!window.speechSynthesis) {\r\n      console.warn(\"Web Speech API not supported\");\r\n      return;\r\n    }\r\n\r\n    synthRef.current = window.speechSynthesis;\r\n    const u = new SpeechSynthesisUtterance();\r\n    u.lang = 'en-US';\r\n    u.rate = 1;\r\n    \r\n    setUtterance(u);\r\n    \r\n    return () => {\r\n      synthRef.current.cancel();\r\n    };\r\n  }, []);\r\n\r\n  // Update utterance text and compute start indices\r\n  useEffect(() => {\r\n    if (utterance && words.length > 0) {\r\n      const fullText = words.map(w => w.text).join(' ');\r\n      utterance.text = fullText;\r\n      \r\n      // Precompute word start indices (including spaces)\r\n      const starts = [];\r\n      let current = 0;\r\n      for (let i = 0; i < words.length; i++) {\r\n        starts.push(current);\r\n        current += words[i].text.length + (i < words.length - 1 ? 1 : 0); // Add space after each word\r\n      }\r\n      startIndicesRef.current = starts;\r\n    }\r\n  }, [words, utterance]);\r\n\r\n  // Setup utterance boundary handler\r\n  useEffect(() => {\r\n    if (!utterance) return;\r\n\r\n    utterance.onboundary = (event) => {\r\n      if (event.name === 'word') {\r\n        const charIndex = event.charIndex;\r\n        const startIndices = startIndicesRef.current;\r\n        \r\n        // Find current word index using precomputed start positions\r\n        for (let i = 0; i < startIndices.length; i++) {\r\n          const start = startIndices[i];\r\n          const end = start + words[i].text.length;\r\n          \r\n          if (charIndex >= start && charIndex < end) {\r\n            setCurrentIndex(i);\r\n            onHighlight(words[i], i);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }, [utterance, words, onHighlight]);\r\n\r\n  const togglePlayback = () => {\r\n    if (!synthRef.current) return;\r\n    \r\n    if (isPlaying) {\r\n      synthRef.current.pause();\r\n      setIsPlaying(false);\r\n    } else {\r\n      if (synthRef.current.paused) {\r\n        synthRef.current.resume();\r\n      } else {\r\n        synthRef.current.cancel(); // Clear any previous utterances\r\n        synthRef.current.speak(utterance);\r\n      }\r\n      setIsPlaying(true);\r\n    }\r\n  };\r\n\r\n  const handleWordClick = (word, index) => {\r\n    setCurrentIndex(index);\r\n    onHighlight(word, index);\r\n    \r\n    if (!synthRef.current || !utterance) return;\r\n    \r\n    synthRef.current.cancel(); // Stop current speech\r\n    \r\n    // Create new utterance from clicked word\r\n    const textToSpeak = words.slice(index).map(w => w.text).join(' ');\r\n    const u = new SpeechSynthesisUtterance(textToSpeak);\r\n    u.lang = 'en-US';\r\n    u.rate = 1;\r\n    \r\n    // Precompute start indices for subset\r\n    const starts = [];\r\n    let current = 0;\r\n    const subset = words.slice(index);\r\n    for (let i = 0; i < subset.length; i++) {\r\n      starts.push(current);\r\n      current += subset[i].text.length + (i < subset.length - 1 ? 1 : 0);\r\n    }\r\n    \r\n    u.onboundary = (event) => {\r\n      if (event.name === 'word') {\r\n        const charIndex = event.charIndex;\r\n        for (let i = 0; i < starts.length; i++) {\r\n          const start = starts[i];\r\n          const end = start + subset[i].text.length;\r\n          \r\n          if (charIndex >= start && charIndex < end) {\r\n            const originalIndex = index + i;\r\n            setCurrentIndex(originalIndex);\r\n            onHighlight(words[originalIndex], originalIndex);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    };\r\n    \r\n    synthRef.current.speak(u);\r\n    setIsPlaying(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"player-controls\">\r\n      <div className=\"playback-controls\">\r\n        <button \r\n          className=\"play-btn\"\r\n          onClick={togglePlayback}\r\n          disabled={words.length === 0}\r\n        >\r\n          {isPlaying ? '⏸ Pause' : '▶ Play'}\r\n        </button>\r\n      </div>\r\n\r\n      {words.length > 0 && (\r\n        <div className=\"progress-container\">\r\n          <div className=\"progress\">\r\n            {words.map((word, index) => (\r\n              <span \r\n                key={index}\r\n                className={`word ${index === currentIndex ? 'active' : ''} ${index === highlightedIndex ? 'highlighted' : ''}`}\r\n                onClick={() => handleWordClick(word, index)}\r\n              >\r\n                {word.text}\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayerControls;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}