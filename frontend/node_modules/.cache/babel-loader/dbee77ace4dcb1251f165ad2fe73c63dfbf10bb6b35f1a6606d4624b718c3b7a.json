{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Desktop\\\\Oriole\\\\frontend\\\\src\\\\components\\\\PlayerControls.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerControls = ({\n  words,\n  onHighlight,\n  highlightedIndex\n}) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [utterance, setUtterance] = useState(null);\n  useEffect(() => {\n    if (!window.speechSynthesis) {\n      console.warn(\"Web Speech API not supported\");\n      return;\n    }\n    const synth = window.speechSynthesis;\n    const u = new SpeechSynthesisUtterance();\n    u.lang = 'en-US';\n    u.rate = 1;\n\n    // Update utterance when words change\n    u.text = words.map(w => w.text).join(' ');\n\n    // Attach onboundary event\n    u.onboundary = event => {\n      if (event.name === 'word') {\n        const wordIndex = getWordIndex(event.charIndex);\n        setCurrentIndex(wordIndex);\n        onHighlight(words[wordIndex], wordIndex);\n      }\n    };\n    setUtterance(u);\n    return () => {\n      synth.cancel();\n    };\n  }, [words]);\n\n  // Helper function to get the correct word index based on charIndex\n  const getWordIndex = charIndex => {\n    let cumulativeLength = 0;\n    for (let i = 0; i < words.length; i++) {\n      cumulativeLength += words[i].text.length;\n      if (cumulativeLength > charIndex) {\n        return i;\n      }\n    }\n    return -1;\n  };\n  const togglePlayback = () => {\n    const synth = window.speechSynthesis;\n    if (isPlaying) {\n      synth.pause();\n      setIsPlaying(false);\n    } else {\n      if (synth.paused) {\n        synth.resume();\n      } else {\n        synth.speak(utterance);\n      }\n      setIsPlaying(true);\n    }\n  };\n  const handleWordClick = (word, index) => {\n    setCurrentIndex(index);\n    onHighlight(word, index);\n    if (utterance) {\n      const synth = window.speechSynthesis;\n      synth.cancel();\n\n      // Speak from the clicked word\n      const textFromWord = words.slice(index).map(w => w.text).join(' ');\n      const u = new SpeechSynthesisUtterance(textFromWord);\n      u.lang = 'en-US';\n      u.rate = 1;\n      synth.speak(u);\n      setIsPlaying(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playback-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"play-btn\",\n        onClick: togglePlayback,\n        disabled: words.length === 0,\n        children: isPlaying ? '⏸ Pause' : '▶ Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), words.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        children: words.map((word, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `word ${index === currentIndex ? 'active' : ''} ${index === highlightedIndex ? 'highlighted' : ''}`,\n          onClick: () => handleWordClick(word, index),\n          children: word.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerControls, \"1X7Ow9BP7sTFwYkrZaHabxxKeLo=\");\n_c = PlayerControls;\nexport default PlayerControls;\nvar _c;\n$RefreshReg$(_c, \"PlayerControls\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PlayerControls","words","onHighlight","highlightedIndex","_s","isPlaying","setIsPlaying","currentIndex","setCurrentIndex","utterance","setUtterance","window","speechSynthesis","console","warn","synth","u","SpeechSynthesisUtterance","lang","rate","text","map","w","join","onboundary","event","name","wordIndex","getWordIndex","charIndex","cancel","cumulativeLength","i","length","togglePlayback","pause","paused","resume","speak","handleWordClick","word","index","textFromWord","slice","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/OneDrive/Desktop/Oriole/frontend/src/components/PlayerControls.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst PlayerControls = ({ words, onHighlight, highlightedIndex }) => {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [utterance, setUtterance] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!window.speechSynthesis) {\r\n      console.warn(\"Web Speech API not supported\");\r\n      return;\r\n    }\r\n\r\n    const synth = window.speechSynthesis;\r\n    const u = new SpeechSynthesisUtterance();\r\n    u.lang = 'en-US';\r\n    u.rate = 1;\r\n\r\n    // Update utterance when words change\r\n    u.text = words.map(w => w.text).join(' ');\r\n\r\n    // Attach onboundary event\r\n    u.onboundary = (event) => {\r\n      if (event.name === 'word') {\r\n        const wordIndex = getWordIndex(event.charIndex);\r\n        setCurrentIndex(wordIndex);\r\n        onHighlight(words[wordIndex], wordIndex);\r\n      }\r\n    };\r\n\r\n    setUtterance(u);\r\n\r\n    return () => {\r\n      synth.cancel();\r\n    };\r\n  }, [words]);\r\n\r\n  // Helper function to get the correct word index based on charIndex\r\n  const getWordIndex = (charIndex) => {\r\n    let cumulativeLength = 0;\r\n    for (let i = 0; i < words.length; i++) {\r\n      cumulativeLength += words[i].text.length;\r\n      if (cumulativeLength > charIndex) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  };\r\n\r\n  const togglePlayback = () => {\r\n    const synth = window.speechSynthesis;\r\n\r\n    if (isPlaying) {\r\n      synth.pause();\r\n      setIsPlaying(false);\r\n    } else {\r\n      if (synth.paused) {\r\n        synth.resume();\r\n      } else {\r\n        synth.speak(utterance);\r\n      }\r\n      setIsPlaying(true);\r\n    }\r\n  };\r\n\r\n  const handleWordClick = (word, index) => {\r\n    setCurrentIndex(index);\r\n    onHighlight(word, index);\r\n\r\n    if (utterance) {\r\n      const synth = window.speechSynthesis;\r\n      synth.cancel();\r\n\r\n      // Speak from the clicked word\r\n      const textFromWord = words.slice(index).map(w => w.text).join(' ');\r\n      const u = new SpeechSynthesisUtterance(textFromWord);\r\n      u.lang = 'en-US';\r\n      u.rate = 1;\r\n      synth.speak(u);\r\n      setIsPlaying(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"player-controls\">\r\n      <div className=\"playback-controls\">\r\n        <button \r\n          className=\"play-btn\"\r\n          onClick={togglePlayback}\r\n          disabled={words.length === 0}\r\n        >\r\n          {isPlaying ? '⏸ Pause' : '▶ Play'}\r\n        </button>\r\n      </div>\r\n\r\n      {words.length > 0 && (\r\n        <div className=\"progress-container\">\r\n          <div className=\"progress\">\r\n            {words.map((word, index) => (\r\n              <span \r\n                key={index}\r\n                className={`word ${index === currentIndex ? 'active' : ''} ${index === highlightedIndex ? 'highlighted' : ''}`}\r\n                onClick={() => handleWordClick(word, index)}\r\n              >\r\n                {word.text}\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayerControls;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}